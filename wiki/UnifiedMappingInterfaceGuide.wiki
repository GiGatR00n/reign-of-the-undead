#summary Unified Mapping Interface (UMI) Guide

Since: RotU 2.2.1

Status: Draft

= Introduction =

This document covers using the UMI and the UMI Editor.

= Documentation =
You should have a copy of `_`umi.gsc and `_`umiEditor.gsc from the debug version of the rotu_svr_scripts.iwd or from svn, as these versions still have the API documentation intact.

= General =
To load a non-RotU map or to override a RotU map generally requires three files(e.g. for the map mp_damnalley):
  * mp_damnalley.gsc, the map's main `*`.gsc file
  * mp_damnalley_waypoints.gsc, the waypoints for the map
  * mp_damnalley_tradespawns.gsc, the tradespawns (shop and weapon upgrades) for the map.

These files should be put into custom_maps\maps\mp folder if using svn, or in maps\mp folder in the rotu_svr_mapdata.iwd if you are using the binary release of RotU.

You will need to use a text editor to create or edit the main `*`.gsc file.  For the other two, you can make the waypoints and tradespawns in-game, then save them as described in this guide.

After you make changes to these files, you will need to rebuild the mod with {{{perl makeMod.pl -s}}} if you are using svn, otherwise you will need to manually re-zip rotu_svr_mapdata.iwd if you using the binary release of RotU.

= Running a Map in UMI Developer Mode =
In server.cfg, make sure `dedicated` is set to 0 so it will be a Listen server.  Edit playMod.bat so it will load the map you want to run.  Also edit playMod.bat so that `developer` and `developer_script` are set to 1. You also need to edit `fs_game` so it points to whatever you called your mod instead of the default 'mods\rotudev'. Then you may execute playMod.bat to run the map so you can edit waypoints, tradespawns, etc, or to test your changes.

If you want to edit tradespawns and waypoints, set `umiEditorMode = true` in the map's main `*`.gsc file.  If you want to test it with your new tradespawns and zombies, set `umiEditorMode = false`.

With `umiEditorMode = true`, the game won't actually start, so you won't be bothered by zombies. If `umiEditorMode = false` the game will start, and you will get zombies.

= Showing Spawnpoints =
In the map's main `*`.gsc file, we typically have a code block:
{{{
    if (umiEditorMode) {
        devDrawAllPossibleSpawnpoints();
        maps\mp\_umiEditor::initMapEditor();
    } else {
}}}
The call to `devDrawAllPossibleSpawnpoints();` draws a red vertical laser at each possible spawnpoint.  The purpose of this is to prevent you from placing a tradespawn (shop or weapons upgrade) on top of or too close to a spawnpoint.

= Troubleshooting Errors =

If there are errors, open console_mp.log and search for " error" (note the leading space).  A single error will often cause many other errors, so the only error we care about is the first one this search finds.

There are two types of errors: compile errors and runtime errors. A compile error usually means you have a typo in your code, or you called a function that doesn't exist, or called a function with incorrect parameters, or you made some other syntax error.  A runtime error happens while the code is running, and the most often cause is that a variable is undefined.

== Error: Loading non-existent tradespawns ==
{{{
******* script runtime error *******
undefined is not an array, string, or vector: (file 'maps/mp/_umi.gsc', line 610)
    if (!isDefined(level.tradespawns[int(weapons[0])])) {
                         *
Error: called from:
(file 'maps/mp/mp_damnalley.gsc', line 72)
        buildWeaponShopsByTradespawns("0 2 4 6 8 10 12");
        *
Error: started from:
(file 'maps/mp/_umi.gsc', line 929)
        wait .5;
        *
Error: ************************************
}}}
This runtime error happens because in the map's main `*`.gsc file, you are telling it to load weapon shops by tradespawns, but there aren't any.  Either the tradespawns file doesn't exist, or you neglected to load it.  You may also be running the map with `umiEditorMode = false` when you mean to to have it be `true`.